# Generated by Django 2.1.7 on 2019-03-31 02:21

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ['user1_id'],
            },
        ),
        migrations.CreateModel(
            name='ConversationText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.TextField()),
                ('conversation_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Conversation')),
            ],
            options={
                'ordering': ['user_id'],
            },
        ),
        migrations.CreateModel(
            name='Literature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField()),
                ('title', models.TextField()),
                ('authors', models.TextField()),
                ('year_of_publication', models.IntegerField()),
                ('journal', models.TextField()),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Matches',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ['user1_id'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_match', models.BooleanField()),
                ('new_convo', models.BooleanField()),
                ('seen', models.BooleanField()),
                ('conversation_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Conversation')),
                ('match_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Matches')),
            ],
            options={
                'ordering': ['match_id'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.TextField(null=True)),
                ('last_name', models.TextField(null=True)),
                ('email', models.EmailField(max_length=254)),
                ('age', models.IntegerField(null=True)),
                ('gender', models.TextField(choices=[('Male', 'Male'), ('Female', 'Female')], null=True)),
                ('political_status', models.TextField(choices=[('Democrat', 'Democrat'), ('Republican', 'Republican'), ('Libertarian', 'Libertarian'), ('Green Party', 'Green Party'), ('Other', 'Other')], null=True)),
            ],
            options={
                'ordering': ['last_name'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('why_report', models.TextField()),
                ('conversationtext_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.ConversationText')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Profile')),
            ],
            options={
                'ordering': ['conversationtext_id'],
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer1', models.IntegerField()),
                ('answer2', models.IntegerField()),
                ('answer3', models.IntegerField()),
                ('conversation_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Conversation')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Profile')),
            ],
            options={
                'ordering': ['conversation_id'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('category', models.TextField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TopicLiterature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('literature_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Literature')),
                ('topic_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Topic')),
            ],
            options={
                'ordering': ['topic_id'],
            },
        ),
        migrations.CreateModel(
            name='UserTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view', models.TextField(choices=[('Strong Agree with Liberal View', 'Strong Agree with Liberal View'), ('Leaning towards Liberal View', 'Leaning towards Liberal View'), ('Neutral', 'Neutral'), ('Leaning towards Conservative View', 'Leaning towards Conservative View'), ('Strongly Agree with Conservative View', 'Strongly Agree with Conservative View')])),
                ('progress', models.IntegerField()),
                ('interest_other_side', models.BooleanField()),
                ('topic_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Topic')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Profile')),
            ],
            options={
                'ordering': ['user_id'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='topic_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Topic'),
        ),
        migrations.AddField(
            model_name='profile',
            name='interested_topics',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Topic'),
        ),
        migrations.AddField(
            model_name='matches',
            name='topic1_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='match_topic1', to='pen_pal.Topic'),
        ),
        migrations.AddField(
            model_name='matches',
            name='topic2_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='match_topic2', to='pen_pal.Topic'),
        ),
        migrations.AddField(
            model_name='matches',
            name='topic3_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='match_topic3', to='pen_pal.Topic'),
        ),
        migrations.AddField(
            model_name='matches',
            name='user1_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='match_user1', to='pen_pal.Profile'),
        ),
        migrations.AddField(
            model_name='matches',
            name='user2_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='match_user2', to='pen_pal.Profile'),
        ),
        migrations.AddField(
            model_name='conversationtext',
            name='question_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Question'),
        ),
        migrations.AddField(
            model_name='conversationtext',
            name='topic_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Topic'),
        ),
        migrations.AddField(
            model_name='conversationtext',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pen_pal.Profile'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='user1_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user1', to='pen_pal.Profile'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='user2_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user2', to='pen_pal.Profile'),
        ),
    ]
